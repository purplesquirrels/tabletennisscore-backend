#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('tabletennisbackend:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}




var io = require('socket.io')(server);

io.on('connection', function (socket) {

  var code = Math.round(Math.random() * 10000);

  //console.log('new connection', code);

  var pinger = setInterval(function () {
    socket.emit('ping', { ping: 1 });
  }, 5000);

  socket.emit('send-match-code', JSON.stringify({ code: code }));

  socket.on('join-match', function (data) {
    data = JSON.parse(data);
    socket.join(data.code);
    socket.broadcast.to(data.room).emit('state-requested', JSON.stringify(data));
  });

  socket.on('send-state', function (data) {
    data = JSON.parse(data);
    socket.broadcast.to(data.room).emit('new-state', JSON.stringify(data));
  });
  socket.on('request-state', function (data) {
    data = JSON.parse(data);
    socket.broadcast.to(data.room).emit('state-requested', JSON.stringify(data));
  });
});